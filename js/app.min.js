API_URL = 'http://localhost:5000';

var myApp = angular.module('unisus', ['ui.router', 'cleave.js', 'satellizer']);

myApp.config(function ($authProvider, $stateProvider) {

  $authProvider.facebook({
    clientId: '319210081588306',
    url: '/api/auth/facebook'
  });

  var orderState = {
    name: 'order',
    url: '/orders',
    templateUrl: '/templates/orders.html',
    controller: function ($scope, $state, OrderService) {

      loadScopeDependencies($scope);

      // Handle controller
      var initialize = function () {
        loadOrders();
      };

      var loadOrders = function () {
        OrderService.listOrders(
          function (orders) {
            $scope.orders = orders;
          }
        )
      };

      $scope.calculateTotal = function (order) {
        var sum = 0;
        for (var i = 0; i < order.orderProducts.length; i++) {
          var item = order.orderProducts[i];
          sum += (item.discountedPrice * item.amount);
        }
        return sum + order.shippingFee;
      };

      initialize();
    }
  };

  var customerState = {
    name: 'customer',
    url: '/customers',
    templateUrl: '/templates/customers.html',
    controller: function ($scope, $state, CustomerService) {

      // Handle controller
      $scope.data = {};

      var initialize = function () {
        loadScopeDependencies($scope);
        loadCustomers();
      };

      var loadCustomers = function () {
        CustomerService.listCustomers(
          function (customers) {
            $scope.data.customers = customers;
          }
        )
      };

      initialize();
    }
  };

  var customerPanelState = {
    name: 'customer_panel',
    url: '/customers/:customerId',
    templateUrl: '/templates/customer_panel.html',
    controller: function ($scope, $state, $stateParams, CustomerService) {

      var initialize = function () {
        loadScopeDependencies($scope);
        loadOrder();
      };

      var loadOrder = function () {
        CustomerService.fetchCustomer($stateParams['customerId'],
          function (customer) {
            $scope.customer = customer;
          }
        );
      };

      initialize();
    }
  };

  var createCustomerState = {
    name: 'create_customer',
    url: '/create/customer?url',
    templateUrl: '/templates/create_customer.html',
    controller: function ($scope, $state, $stateParams, CustomerService) {
      $scope.customer = {
        'url': $stateParams['url']
      };

      $scope.submit = function () {
        CustomerService.createCustomer($scope.customer).then(
          function (customer) {
            $scope.response = {
              'customer': customer
            };
            $scope.customer = {};
            $('#confirmModal').modal('show');
          },
          function (err) {
            console.log(err);
          }
        );
      };

      $scope.routeToCreateOrder = function (customerId) {
        $('#confirmModal').modal('hide');
        $state.go('create_order', {customerId: customerId});
      };

      $scope.routeToAddReceivingAddress = function (customerId) {
        $('#confirmModal').modal('hide');
        $state.go('create_receiving_address', {customerId: customerId});
      };
    }
  };

  var productState = {
    name: 'products',
    url: '/products',
    templateUrl: '/templates/products.html',
    controller: function ($scope, $state, ProductService) {
      // // Check permissions before doing anything
      // if (!('Product' in permissions && permissions['Product'].indexOf('read') > -1)) {
      //   $state.go('unauthorize', {'permission': 'read', 'resource': 'Product'});
      // }

      loadScopeDependencies($scope);

      $scope.working = {}; // point to working object

      ProductService.listProducts().then(
        function (products) {
          $scope.products = products;
        },
        function (reason) {
          console.log(reason);
        }
      );

      $scope.formatMoney = function (number) {
        return formatMoney(number, 'Ä‘');
      };

      $scope.confirmDeleteProduct = function (product) {
        $scope['working'].processing = false;
        $scope['working'].status = 'Yes, I\'m sure';
        $scope['working'].product = product;
        $('#confirmDeleteModal').modal('show');
      };

      $scope.deleteProduct = function (product) {
        $scope['working'].processing = true;
        $scope['working'].status = 'Deleting...';
        ProductService.deleteProduct(product.id).then(
          function (resp) {
            $('#confirmDeleteModal').modal('hide');
            $scope.products.splice($scope.products.indexOf(product), 1);
          },
          function (err) {
            console.log('Delete product error: ' + err);
          }
        );
      };

      $scope.editProduct = function (product) {
        $scope['working'].processing = false;
        $scope['working'].status = 'Save';
        $scope['working'].product = product;
        console.log(product);
        $('#editModal').modal('show');
      };

      var attributes = {};
      $scope.changeProductValue = function (fieldName, fieldValue) {
        attributes[fieldName] = fieldValue;
      };

      $scope.updateProduct = function (product) {
        $scope['working'].processing = true;
        $scope['working'].status = 'Saving...';
        ProductService.updateProduct(product.id, attributes).then(
          function (resp) {
            $('#editModal').modal('hide');
          },
          function (err) {
            $('#editModal').modal('hide');
          }
        )
      }

    }
  };

  var createProductState = {
    name: 'create_product',
    url: '/create/product',
    templateUrl: '/templates/create_product.html',
    controller: function ($scope, $state, ProductService) {

      loadScopeDependencies($scope);

      // Handle controller codes
      $scope.product = {};
      $scope.submit = function () {
        ProductService.createProduct($scope.product).then(
          function (product) {
            $scope.response = {
              'product': product
            };
            $scope.product = {}; // Clear old form data
            $('#confirmModal').modal('show');
          },
          function (err) {
            console.log(err);
          });
      };
      $scope.routeToProducts = function () {
        $('#confirmModal').modal('hide');
        $state.go('products');
      }
    }
  };

  var createOrderState = {
    name: 'create_order',
    url: '/create/order?customerId',
    templateUrl: '/templates/create_order.html',
    controller: function ($scope, $state, $stateParams, CustomerService, OrderService) {

      $scope.verified = {};

      $scope.checking = {
        status: 'Check',
        processing: false,
        reset: function () {
          this.status = 'Check';
          this.processing = false;
        },
        checkCustomerUrl: function () {
          $scope['checking'].status = 'Checking...';
          $scope['checking'].processing = true;
          CustomerService.findCustomer(this.url).then(
            function (customer) {
              $scope['checking'].reset();

              if (customer) {
                $scope.customer = customer;
                $scope['verified'].customer = true;
              }
              else {
                $('#confirmCreateCustomerModal').modal('show');
              }
            },
            function (err) {
              console.log(err);
            }
          )
        }
      };

      // Handle controller codes
      if ($stateParams.customerId) {
        $scope['checking'].status = 'Checking...';
        $scope['checking'].processing = true;

        CustomerService.getCustomer($stateParams.customerId).then(
          function (customer) {
            $scope.customer = customer;
            $scope['verified'].customer = true;

            $scope['checking'].reset();
            $scope['checking'].url = customer.url;

          },
          function (err) {
            console.log(err);
          }
        );
      }

      $scope.routeToCreateCustomer = function (customerUrl) {
        $('#confirmCreateCustomerModal').modal('hide');
        $state.go('create_customer', {'url': customerUrl});
      };

      $scope.initNewOrder = function () {
        OrderService.initNewOrder($scope.customer.id).then(
          function (order) {
            $state.go('edit_order', {orderId: order.id});
          },
          function (err) {
            console.log(err);
          }
        )
      };

    }
  };

  var editOrderState = {
    name: 'edit_order',
    url: '/orders/:orderId',
    templateUrl: '/templates/edit_order.html',

    controller: function ($scope, $stateParams, $filter, ProductService, OrderService, CustomerService,
                          ShippingProviderService, ShippingStatusService) {

      loadScopeDependencies($scope);


      var loadOrder = function (callback) {
        OrderService.fetchOrder($stateParams['orderId']).then(
          function (order) {
            $scope.order = order;
            callback();
          }
        )
      };

      var loadOrderProducts = function (callback) {
        OrderService.fetchOrderProducts($scope.order.id).then(
          function (orderProducts) {
            $scope.order.orderProducts = orderProducts;
            callback();
          }
        )
      };

      var loadProducts = function (callback) {
        return ProductService.listProducts().then(
          function (products) {
            $scope.products = products;
            if (callback) callback();
          }
        );
      };

      var initialize = function () {
        loadOrder(function () {
          loadProducts(function () {
            loadOrderProducts(function () {
              loadReceivingInfos(function () {
                loadShippingProviders();
                loadShippingStatuses();
              });
            });
          });
        });
      };

      $scope.modal = {orderProduct: {}};

      $scope.showAddOrderProductModal = function () {
        $('#addOrderProductModal').modal('show');
      };

      $scope.addOrderProduct = function (productId, discountedPrice, amount) {
        OrderService.addOrderProduct($scope.order.id, productId, discountedPrice, amount).then(
          function (orderProduct) {
            $scope.order.orderProducts.push(orderProduct);
            $('#addOrderProductModal').modal('hide');
          }
        )
      };

      $scope.addReceiverInfo = function () {
        $scope.receiver = {};
        $('#addReceivingModal').modal('show');
      };

      $scope.saveReceiverInfo = function (receiver) {
        receiver.customerId = $scope.order.customer.id;
        if (receiver.id) {
          CustomerService.updateReceivingInfo(receiver).then(
            function (response) {
              $('#addReceivingModal').modal('hide');
              loadReceivingInfos();
            }
          )
        }
        else {
          CustomerService.createReceivingInfo(receiver).then(
            function (receiverInfo) {
              $('#addReceivingModal').modal('hide');
              loadReceivingInfos()
            },
            function (err) {
              console.log(err);
            }
          );
        }
      };

      $scope.deleteReceiverInfo = function (info) {
        info.customerId = $scope.order.customer.id;
        CustomerService.deleteReceivingInfo(info).then(
          function (response) {
            var index = $scope.receiving.infos.indexOf(info);
            $scope.receiving.infos.splice(index, 1);
          },
          function (err) {
            console.log(err);
          }
        )
      };

      $scope.editReceiverInfo = function (info) {
        $scope.receiver = {
          customerId: $scope.order.customer.id,
          id: info.id,
          name: info.name,
          phone: info.phone,
          address: info.address
        };
        $('#addReceivingModal').modal('show');
      };

      // Customer receiving address
      $scope.receiving = {};
      $scope.receiving.update = function () {
        OrderService.updateShipping($scope.order.id, $scope.receiving.selectedInfo.id).then(
          function (response) {
            console.log(response);
          }
        )
      };

      var loadReceivingInfos = function (callback) {
        $scope.receiving.selectedInfo = null;
        CustomerService.fetchReceivingInfos($scope.order.customer.id).then(
          function (infos) {
            $scope.receiving.infos = infos;
            if ($scope.order.shipping) {
              $scope.receiving.selectedInfo = $filter('filter')(infos, {id: $scope.order.shipping.id})[0];
            }
            if (callback) callback();
          }
        )
      };

      // Manage Shipping Features
      $scope.shipping = {
        adding: {
          provider: {
            data: {},
            processing: false,
            verifying: {
              name: {error: false, success: false}
            },
            reset: function () {
              this.processing = false;
              this.verifying.name = {error: false, success: false}
            },
            verifyName: function () {
              if (!this.data.name) {
                this.verifying.name.error = true;
                this.verifying.name.success = false;
              }
              else {
                this.verifying.name.error = false;
                this.verifying.name.success = true;
              }
            },
            addProvider: function () {
              if (!this.data.name) {
                this.verifying.name.error = true;
                return;
              }
              this.procesing = true;
              var self = this;
              ShippingProviderService.createProvider(this.data).then(
                function (result) {
                  $scope.shipping.providers.push(result);
                  self.data = {};
                  self.reset();
                }
              )
            }
          },
          status: {
            data: {},
            processing: false,
            verifying: {
              name: {error: false, success: false}
            },
            reset: function () {
              this.processing = false;
              this.verifying.name = {error: false, success: false};
            },
            verifyName: function () {
              if (!this.data.name) {
                this.verifying.name.error = true;
                this.verifying.name.success = false;
              }
              else {
                this.verifying.name.error = false;
                this.verifying.name.success = true;
              }
            },
            addStatus: function () {
              if (!this.data.name) {
                this.verifyName();
                return;
              }
              this.processing = true;
              var self = this;
              ShippingStatusService.createStatus(this.data).then(
                function (result) {
                  $scope.shipping.statuses.push(result);
                  self.data = {};
                  self.reset();
                }
              )
            }
          }
        },
        editing: {
          provider: {
            data: {},
            selectedProvider: {},
            setEditing: function (provider) {
              this.selectedProvider = provider;
              this.data.name = provider.name;
              this.data.website = provider.website;
            },
            isEditing: function (provider) {
              return this.selectedProvider == provider;
            },
            cancelEditing: function () {
              this.selectedProvider = null;
            },
            save: function () {
              var self = this;
              self.saving = true;
              ShippingProviderService.updateProvider(this.selectedProvider.id, {
                'name': this.data.name,
                'website': this.data.website
              }).then(
                function (response) {
                  self.selectedProvider.name = self.data.name;
                  self.selectedProvider.website = self.data.website;

                  // Delay display action button to prevent accidentally click on delete
                  setTimeout(function () {
                    self.saving = false;
                    self.selectedProvider = null;
                    $scope.$apply();
                  }, 1500);
                }
              );
            },
            saving: false,
            deleting: false,
            deleteProvider: function (provider) {
              var self = this;
              self.deleting = true;
              ShippingProviderService.deleteProvider(provider.id).then(
                function (response) {
                  setTimeout(function () {
                    self.deleting = false;
                    $scope.shipping.providers.splice($scope.shipping.providers.indexOf(provider), 1);
                    $scope.$apply();
                  }, 1000);
                }
              )
            }
          },
          status: {
            data: {},
            selectedStatus: {},
            saving: false,
            deleting: false,
            setEditing: function (status) {
              this.selectedStatus = status;
              this.data.name = status.name;
            },
            isEditing: function (status) {
              return this.selectedStatus == status;
            },
            cancelEditing: function () {
              this.selectedStatus = null;
            },
            save: function () {
              var self = this;
              self.saving = true;
              ShippingStatusService.updateStatus(this.selectedStatus.id, {
                'name': this.data.name
              }).then(
                function (response) {
                  self.selectedStatus.name = self.data.name;

                  // Delay display action button to prevent accidentally click on delete
                  setTimeout(function () {
                    self.saving = false;
                    self.selectedStatus = null;
                    $scope.$apply();
                  }, 1500);
                }
              )
            },
            deleteStatus: function (status) {
              var self = this;
              self.deleting = true;
              ShippingStatusService.deleteStatus(status.id).then(
                function (response) {
                  setTimeout(function () {
                    self.deleting = false;
                    $scope.shipping.statuses.splice($scope.shipping.statuses.indexOf(status), 1);
                    $scope.$apply();
                  }, 1000);
                }
              )
            }
          }
        },
        selecting: {
          provider: {
            data: {},
            onChange: function () {

            }
          },
          status: {
            data: {},
            onChange: function () {

            }
          }
        },
        showManageStatusModal: function () {
          $('#manageShippingStatusModal').modal('show');
        },
        showManageProviderModal: function () {
          $('#manageShippingProviderModal').modal('show');
        }
      };

      var loadShippingProviders = function () {
        ShippingProviderService.listProviders().then(
          function (providers) {
            $scope.shipping.providers = providers;
            var selectedItem = $filter('filter')(providers, {id: $scope.order.shippingProvider.id})[0]
            $scope.shipping.selecting.provider.data = selectedItem;
          }
        )
      };

      var loadShippingStatuses = function () {
        ShippingStatusService.listStatuses().then(
          function (statuses) {
            $scope.shipping.statuses = statuses;
            var selectedItem = $filter('filter')(statuses, {id: $scope.order.shippingStatus.id})[0];
            $scope.shipping.selecting.status.data = selectedItem;
          }
        )
      };

      // Tracking the changed data
      $scope.changing = {
        isChanged: function () {
          return this.hasChanges.attributes
            || this.hasChanges.relationships.shippingStatus
            || this.hasChanges.relationships.shippingProvider
            || this.hasChanges.relationships.shipping;
        },
        hasChanges: {
          attributes: false,
          relationships: {shippingStatus: false, shippingProvider: false, shipping: false}
        },
        data: {
          attributes: {},
          relationships: {}
        },
        onShippingStatusChange: function (status) {
          this.hasChanges.relationships.shippingStatus = true;
          this.data.relationships.shippingStatus = status;
        },
        onShippingServiceCodeChange: function (code) {
          this.hasChanges.attributes = true;
          this.data.attributes.shppngsrvcode = code;
        },
        onShippingFeeChange: function (fee) {
          this.hasChanges.attributes = true;
          this.data.attributes.shppngfee = fee;
          this.data.attributes.prctotal = $scope.calculateTotal();
        },
        onShippingDateChange: function (date) {
          var dtStr = date.replace(/(\d{2})(\d{2})(\d{4})/g, "$1/$2/$3");
          if ($scope.utils.verifyDate(dtStr)) {
            this.hasChanges.attributes = true;
            this.data.attributes.shppngat = date.replace(/(\d{2})(\d{2})(\d{4})/g, "$3-$2-$1");
          }
        },
        onCodReceivedChange: function (flag) {
          this.hasChanges.attributes = true;
          this.data.attributes.codreceived = flag;
        },
        onShippingProviderChange: function (provider) {
          this.hasChanges.relationships.shippingProvider = true;
          this.data.relationships.shippingProvider = provider;
        },
        onShippingChange: function (shipping) {
          this.hasChanges.relationships.shipping = true;
          this.data.relationships.shipping = shipping;
        },
        saveAllChanged: function () {
          var self = this;
          if (this.hasChanges.attributes) {
            OrderService.updateOrder($scope.order.id, this.data.attributes).then(
              function (response) {
                self.hasChanges.attributes = false;
                self.data.attributes = {};
              }
            )
          }

          if (this.hasChanges.relationships.shipping) {

            OrderService.updateShipping($scope.order.id, this.data.relationships.shipping.id).then(
              function (response) {
                self.hasChanges.relationships.shipping = false;
              }
            )
          }
          if (this.hasChanges.relationships.shippingProvider) {

            OrderService.updateShippingProvider($scope.order.id, this.data.relationships.shippingProvider.id).then(
              function (response) {
                self.hasChanges.relationships.shippingProvider = false;
              }
            )
          }
          if (this.hasChanges.relationships.shippingStatus) {
            OrderService.updateShippingStatus($scope.order.id, this.data.relationships.shippingStatus.id).then(
              function (response) {
                self.hasChanges.relationships.shippingStatus = false;
              }
            )
          }
        }
      };

      $scope.calculateTotal = function () {
        var sum = 0;
        if (!$scope.order) return sum;
        if ($scope.order.orderProducts) {
          for (var i = 0; i < $scope.order.orderProducts.length; i++) {
            var item = $scope.order.orderProducts[i];
            sum = sum + (Number(item.discountedPrice) * Number(item.amount));
          }
        }
        if (Number($scope.order.shippingFee) > 0) {
          sum += Number($scope.order.shippingFee);
        }
        return sum;
      };

      initialize();
    }
  };

  var unauthorizeState = {
    name: 'unauthorize',
    url: '/unauthorize?permission&resource',
    templateUrl: '/templates/unauthorize.html',
    controller: function ($scope, $stateParams) {
      $scope.permission = $stateParams.permission;
      $scope.resource = $stateParams.resource;
    }
  };

  $stateProvider.state(orderState);
  $stateProvider.state(customerState);
  $stateProvider.state(customerPanelState);
  $stateProvider.state(createCustomerState);
  $stateProvider.state(productState);
  $stateProvider.state(createProductState);
  $stateProvider.state(createOrderState);
  $stateProvider.state(editOrderState);
  $stateProvider.state(unauthorizeState);

});

myApp.controller('LoginCtrl', function($scope, $auth) {

  $scope.authenticate = function(provider) {
    $auth.authenticate(provider);
  };

  $scope.isAuthenticated = function() {
    return $auth.isAuthenticated();
  };

  $scope.model = {
    name:  $auth.getPayload() ? $auth.getPayload()['atr'].name : ''
  };

  $scope.logout = function () {
    $auth.logout();
  };

});

myApp.service('OrderService', function ($http, $q, $filter, UserService) {
  var baseUrl = API_URL + '/orders';
  var authorizationHeader = UserService.getAuthorizationHeader();

  this.initNewOrder = function (customerId) {
    var deferred = $q.defer();
    $http({
      method: 'POST',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl,
      data: {
        'data': {
          'type': 'orders',
          'attributes': {},
          'relationships': {
            'customer': {
              'data': {'type': 'customers', 'id': customerId}
            }
          }
        }
      }
    }).success(function (response, status) {
      var data = response['data'];
      var order = {'id': data.id};
      deferred.resolve(order);
    }).error(function (err, status) {
      deferred.reject(err);
    });

    return deferred.promise;
  };

  this.listOrders = function (onResponse, onError) {
    $http({
      method: 'GET',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl
    }).success(function (response, status) {
      var data = response.data;
      var included = response.included;
      var orders = [];
      for (var i = 0; i < data.length; i++) {
        var item = data[i];
        var order = {
          id: item.id,
          codReceived: Boolean(Number(item['attributes'].codreceived)),
          created: item['attributes'].created,
          priceTotal: Number(item['attributes'].prctotal),
          shippingFee: Number(item['attributes'].shppngfee),
          shippingAt: item['attributes'].shppngat ? new Date(item['attributes'].shppngat) : null,
          shippingServiceCode: item['attributes'].shppngsrvcode
        };
        var rel = item['relationships'];
        order.customer = {};
        if (rel['customer'].data) {
          var cusData = $filter('filter')(included, {'id': rel['customer']['data'].id, 'type': 'customers'})[0];
          order.customer = {
            id: cusData.id,
            name: cusData['attributes'].name,
            description: cusData['attributes'].description,
            url: cusData['attributes'].url
          }
        }

        order.shipping = {};
        if (rel['shipping'].data) {
          var shippingRel = rel['shipping'].data;
          var shippingData = $filter('filter')(included, {'id': shippingRel.id, 'type': shippingRel.type})[0];
          order['shipping'].id = shippingData.id;
          order['shipping'].receiverName = shippingData['attributes'].rcvrname;
          order['shipping'].phone = shippingData['attributes'].phone;
          order['shipping'].address = shippingData['attributes'].address;
        }

        order.shippingProvider = {};
        if (rel['shppngprvdr'].data) {
          var relData = rel['shppngprvdr'].data;
          var shippingProviderData = $filter('filter')(included, {'id': relData.id, 'type': relData.type})[0];
          order['shippingProvider'].id = shippingProviderData.id;
          order['shippingProvider'].name = shippingProviderData['attributes'].name;
          order['shippingProvider'].website = shippingProviderData['attributes'].website;
        }

        order.shippingStatus = {};
        if (rel['shppngstatus'].data) {
          var relData = rel['shppngstatus'].data;
          var shippingStatusData = $filter('filter')(included, {'id': relData.id, 'type': relData.type})[0];
          order['shippingStatus'].id = shippingStatusData.id;
          order['shippingStatus'].name = shippingStatusData['attributes'].name;
        }

        order.orderProducts = [];
        if (rel['ordrproducts'].data.length > 0) {
          var relData = rel['ordrproducts'].data;
          for (var j = 0; j < relData.length; j++) {
            var opData = relData[j];
            var orderProductData = $filter('filter')(included, {'id': opData.id, 'type': opData.type})[0];
            order.orderProducts.push({
              id: orderProductData.id,
              amount: Number(orderProductData['attributes'].amount),
              discountedPrice: Number(orderProductData['attributes'].dscntdprice)
            });
          }
        }
        orders.push(order);
      }
      onResponse(orders);
    }).error(function (err, status) {
      if (onError) onError(err);
    });
  };

  this.fetchOrder = function (orderId) {
    var deferred = $q.defer();
    $http({
      method: 'GET',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + orderId
    }).success(function (response) {
      var data = response['data'];
      var included = response['included'];
      var order = {
        'id': data.id,
        'codReceived': Boolean(data['attributes'].codreceived),
        'creatingFlag': data['attributes'].crtflag,
        'priceTotal': data['attributes'].prctotal,
        'shippingAt': data['attributes'].shppngat,
        'shippingFee': Number(data['attributes'].shppngfee),
        'shippingServiceCode': data['attributes'].shppngsrvcode,
        'created': data['attributes'].created,
        'orderProducts': []
      };
      for (var i = 0; i < included.length; i++) {
        var item = included[i];
        if (item.type == 'customers') {
          order['customer'] = {
            'id': item.id,
            'name': item['attributes'].name,
            'url': item['attributes'].url,
            'description': item['attributes'].description
          }
        }
        else if (item.type == 'order-products') {
          order['orderProducts'].push({
            'id': item.id,
            'amount': item['attributes'].amount,
            'discountedPrice': item['attributes'].dscntdprice,
            'product': {
              'id': item['relationships']['product']['data']['id']
            }
          })
        }
        else if (item.type == 'shippings') {
          order['shipping'] = {
            'id': item.id,
            'receiverName': item['attributes'].rcvrname,
            'phone': item['attributes'].phone,
            'address': item['attributes'].address
          }
        }
        else if (item.type == 'shipping-statuses') {
          order['shippingStatus'] = {
            'id': item.id,
            'name': item['attributes'].name
          }
        }
        else if (item.type == 'shipping-providers') {
          order['shippingProvider'] = {
            'id': item.id,
            'name': item['attributes'].name
          }
        }
      }
      deferred.resolve(order);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.fetchOrderProducts = function (orderId) {
    var deferred = $q.defer();
    $http({
      method: 'GET',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + orderId + '/order_products'
    }).success(function (response) {
      var data = response.data;
      var resources = response.included;
      var results = [];
      for (var i = 0; i < data.length; i++) {
        var item = data[i];
        var productData = $filter('filter')(resources, {'id': item['relationships']['product']['data'].id})[0];
        var orderProduct = {
          'id': item.id,
          'amount': item['attributes'].amount,
          'discountedPrice': item['attributes'].dscntdprice,
          'product': {
            'id': productData.id,
            'name': productData['attributes'].name,
            'price': productData['attributes'].price,
            'unit': productData['attributes'].unit,
            'description': productData['attributes'].description
          }
        };
        results.push(orderProduct);
      }
      deferred.resolve(results);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.addOrderProduct = function (orderId, productId, discountedPrice, amount) {
    var deferred = $q.defer();
    $http({
      method: 'POST',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + orderId + '/order_products',
      data: {
        'data': {
          'type': 'order-products',
          'attributes': {
            'dscntdprice': discountedPrice,
            'amount': amount
          },
          'relationships': {
            'order': {
              'data': {'type': 'orders', 'id': orderId}
            },
            'product': {
              'data': {'type': 'products', 'id': productId}
            }
          }
        }
      }
    }).success(function (response) {
      var data = response['data'];
      var productData = $filter('filter')(response.included, {'id': data['relationships']['product']['data'].id})[0];
      var orderProduct = {
        'id': data.id,
        'discountedPrice': data['attributes'].dscntdprice,
        'amount': data['attributes'].amount,
        'product': {
          'id': productData.id,
          'name': productData['attributes'].name,
          'price': productData['attributes'].price,
          'unit': productData['attributes'].unit,
          'description': productData['attributes'].description
        }
      };
      deferred.resolve(orderProduct);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.updateShipping = function (orderId, shippingId) {
    var deferred = $q.defer();
    $http({
      method: 'PATCH',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + orderId + '/relationships/shipping',
      data: {
        'data': {'type': 'shippings', 'id': shippingId}
      }
    }).success(function (response) {
      deferred.resolve(response);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.updateShippingProvider = function (orderId, providerId) {
    var deferred = $q.defer();
    $http({
      method: 'PATCH',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + orderId + '/relationships/shipping_provider',
      data: {
        'data': {'type': 'shipping-providers', 'id': providerId}
      }
    }).success(function (response) {
      deferred.resolve(response);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.updateShippingStatus = function (orderId, statusId) {
    var deferred = $q.defer();
    $http({
      method: 'PATCH',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + orderId + '/relationships/shipping_status',
      data: {
        'data': {'type': 'shipping-statuses', 'id': statusId}
      }
    }).success(function (response) {
      deferred.resolve(response);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.updateOrder = function (id, attributes) {
    var deferred = $q.defer();
    $http({
      method: 'PATCH',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + id,
      data: {
        'data': {
          'type': 'orders',
          'id': id,
          'attributes': attributes
        }
      }
    }).success(function (data) {
      deferred.resolve(data);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  }

});

myApp.service('CustomerService', function ($http, $q, $filter, UserService) {
  var baseUrl = API_URL + '/customers';
  var authorizationHeader = UserService.getAuthorizationHeader();

  this.listCustomers = function (onResponse, onError) {
    var customers = [];
    $http({
      method: 'GET',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl
    }).success(function (response, status) {
      var data = response['data'];
      var included = response['included'];
      for (var i = 0; i < data.length; i++) {
        var item = data[i];
        var customer = {
          'id': item.id,
          'url': item['attributes'].url,
          'name': item['attributes'].name,
          'description': item['attributes'].description,
          'created': item['attributes'].created
        };
        var rel = item['relationships'];
        customer.orders = [];
        if (rel['orders'].data.length > 0) {
          for (var j = 0; j < rel['orders'].data.length; j++) {
            var orderItem = rel['orders'].data[j];
            customer.orders.push({id: orderItem.id});
          }
        }
        customers.push(customer);
      }
      onResponse(customers);
    }).error(function (err, status) {
      if (onError) onError(err);
    });

  };

  this.fetchCustomer = function (id, onResponse) {
    $http({
      method: 'GET',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + id
    }).success(function (response) {
      var data = response['data'];
      var included = response['included'];

      var item = data;
      var customer = {
        'id': item.id,
        'url': item['attributes'].url,
        'name': item['attributes'].name,
        'description': item['attributes'].description,
        'created': item['attributes'].created
      };
      var rel = item['relationships'];
      customer.orders = [];
      if (rel['orders'].data.length > 0) {
        for (var j = 0; j < rel['orders'].data.length; j++) {
          var orderItem = rel['orders'].data[j];
          var orderData = $filter('filter')(included, {id: orderItem.id, type: orderItem.type})[0];
          customer.orders.push({
            id: orderData.id,
            created: orderData['attributes'].created,
            shippingAt: orderData['attributes'].shppngat,
            shippingFee: orderData['attributes'].shppngfee,
            codReceived: Boolean(Number(orderData['attributes'].codreceived))
          });
        }
      }
      onResponse(customer);
    }).error(function (err) {
      console.log(err);
    });
  };

  this.createCustomer = function (customer) {
    var deferred = $q.defer();
    $http({
      method: 'POST',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl,
      data: {
        'data': {
          'type': 'customers',
          'attributes': {
            'url': customer.url,
            'name': customer.name,
            'description': customer.description
          }
        }
      }
    }).success(function (response) {
      var data = response['data'].data;
      var result = {
        'id': data.id,
        'url': data['attributes'].url,
        'name': data['attributes'].name,
        'description': data['attributes'].description
      };
      deferred.resolve(result);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.deleteCustomer = function (id) {
    var deferred = $q.defer();
    $http({
      method: 'DELETE',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + id
    }).success(function (response) {
      deferred.resolve(response);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.updateCustomer = function (id, attributes) {
    var deferred = $q.defer();
    $http({
      method: 'PATCH',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + id,
      data: {
        'data': {
          'type': 'customers',
          'id': id,
          'attributes': attributes
        }
      }
    }).success(function (response) {
      deferred.resolve(response);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.getCustomer = function (id) {
    var deferred = $q.defer();
    $http({
      method: 'GET',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + id
    }).success(function (response) {
      var data = response['data'].data;
      var customer = {
        'id': data.id,
        'url': data['attributes'].url,
        'name': data['attributes'].name,
        'description': data['attributes'].description
      };
      deferred.resolve(customer);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.findCustomer = function (url) {
    var deferred = $q.defer();
    this.listCustomers().then(
      function (cus) {
        var results = $filter('filter')(cus, {'url': url});
        if (results.length > 0) {
          deferred.resolve(results[0]);
        }
        else {
          deferred.resolve(null);
        }
      },
      function (err) {
        deferred.reject(err);
      }
    );
    return deferred.promise;
  };

  this.createReceivingInfo = function (info) {
    var deferred = $q.defer();
    $http({
      method: 'POST',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + info.customerId + '/shippings',
      data: {
        'data': {
          'type': 'shippings',
          'attributes': {
            'rcvrname': info.name,
            'phone': info.phone,
            'address': info.address
          },
          "relationships": {
            'customer': {
              'data': {'type': 'customers', 'id': info.customerId}
            }
          }
        }
      }
    }).success(function (response) {
      var data = response['data'].data;
      var receiver = {
        'id': data.id,
        'name': data['attributes'].name,
        'phone': data['attributes'].phone,
        'address': data['attributes'].address
      };
      deferred.resolve(receiver);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.deleteReceivingInfo = function (info) {
    var deferred = $q.defer();
    $http({
      method: 'DELETE',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + info.customerId + '/shippings/' + info.id
    }).success(function (response) {
      deferred.resolve(response);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.updateReceivingInfo = function (info) {
    var deferred = $q.defer();
    $http({
      method: 'PATCH',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + info.customerId + '/shippings/' + info.id,
      data: {
        'data': {
          'type': 'shippings',
          'id': info.id,
          'attributes': {
            'rcvrname': info.name,
            'phone': info.phone,
            'address': info.address
          }
        }
      }
    }).success(function (response) {
      deferred.resolve(response);
    }).error(function (err) {
      deferred.reject(response);
    });
    return deferred.promise;
  };

  this.fetchReceivingInfos = function (customerId) {
    var deferred = $q.defer();
    $http({
      method: 'GET',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + customerId + '/shippings'
    }).success(function (response) {
      var data = response['data'].data;
      var infos = [];
      for (var i = 0; i < data.length; i++) {
        var item = data[i];
        var info = {
          'id': item.id,
          'name': item['attributes'].rcvrname,
          'phone': item['attributes'].phone,
          'address': item['attributes'].address
        };
        infos.push(info);
      }
      deferred.resolve(infos);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

});

myApp.service('ProductService', function ($http, $q, UserService) {
  var baseUrl = API_URL + '/products';

  var authorizationHeader = UserService.getAuthorizationHeader();

  this.listProducts = function () {
    var deferred = $q.defer();
    $http({
      method: 'GET',
      headers: {
        'Authorization': authorizationHeader
      },
      url: baseUrl
    }).success(function (data) {
      var response = data['data'];
      var products = [];
      for (var i = 0; i < response.length; i++) {
        var item = response[i];
        var product = {
          'id': item.id,
          'name': item['attributes'].name,
          'price': Number(item['attributes'].price),
          'unit': item['attributes'].unit,
          'description': item['attributes'].description
        };
        products.push(product);
      }
      deferred.resolve(products);
    }).error(function () {
      deferred.reject('There was an error')
    });

    return deferred.promise;
  };

  this.updateProduct = function (id, attributes) {
    var deferred = $q.defer();
    $http({
      method: 'PATCH',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + id,
      data: {
        'data': {
          'type': 'products',
          'id': id,
          'attributes': attributes
        }
      }
    }).success(function (data) {
      deferred.resolve(data);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.deleteProduct = function (id) {
    var defferred = $q.defer();
    $http({
      method: 'DELETE',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + id
    }).success(function (data) {
      defferred.resolve(data)
    }).error(function (err) {
      defferred.reject(err)
    });
    return defferred.promise;
  };

  this.createProduct = function (product) {
    var deffered = $q.defer();
    $http({
      method: 'POST',
      headers: {
        'Authorization': authorizationHeader,
        'Content-Type': 'application/json'
      },
      data: {
        'data': {
          'type': 'products',
          'attributes': {
            'name': product.name,
            'price': product.price,
            'unit': product.unit,
            'description': product.description
          }
        }
      },
      url: baseUrl
    }).success(function (data) {
      var response = data['data'].data;
      var result = {
        'id': response.id,
        'name': response['attributes'].name,
        'description': response['attributes'].description,
        'unit': response['attributes'].unit,
        'price': response['attributes'].price
      };
      deffered.resolve(result);
    }).error(function (error) {
      deffered.reject(error);
    });
    return deffered.promise;
  }
});

myApp.service('UserService', ['$auth', function ($auth) {

  this.getToken = function () {
    return $auth.getToken();
  };

  this.getAuthorizationHeader = function () {
    return this.getToken();
  }

}]);

myApp.service('ShippingProviderService', function ($http, $q, UserService) {

  var baseUrl = API_URL + '/shipping_providers';
  var authorizationHeader = UserService.getAuthorizationHeader();

  this.listProviders = function () {
    var deferred = $q.defer();
    $http({
      method: 'GET',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl
    }).success(function (response) {
      var data = response['data'];
      var results = [];
      for (var i = 0; i < data.length; i++) {
        var item = data[i];
        results.push({'id': item.id, 'name': item['attributes'].name, 'website': item['attributes'].website});
      }
      deferred.resolve(results);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.createProvider = function (provider) {
    var deferred = $q.defer();
    $http({
      method: 'POST',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl,
      data: {
        'data': {
          'type': 'shipping-providers',
          'attributes': {
            'name': provider.name,
            'website': provider.website
          }
        }
      }
    }).success(function (response) {
      var data = response['data'].data;
      var result = {
        'id': data.id,
        'name': data['attributes'].name,
        'website': data['attributes'].website
      };
      deferred.resolve(result);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.updateProvider = function (id, attributes) {
    var deferred = $q.defer();
    $http({
      method: 'PATCH',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + id,
      data: {
        'data': {
          'type': 'shipping-providers',
          'id': id,
          'attributes': attributes
        }
      }
    }).success(function (response) {
      deferred.resolve(response);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.deleteProvider = function (id) {
    var deferred = $q.defer();
    $http({
      method: 'DELETE',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + id
    }).success(function (data) {
      deferred.resolve(data)
    }).error(function (err) {
      deferred.reject(err)
    });
    return deferred.promise;
  }

});

myApp.service('ShippingStatusService', function ($http, $q, UserService) {
  var baseUrl = API_URL + '/shipping_statuses';
  var authorizationHeader = UserService.getAuthorizationHeader();

  this.listStatuses = function () {
    var deferred = $q.defer();
    $http({
      method: 'GET',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl
    }).success(function (response) {
      var data = response['data'];
      var results = [];
      for (var i = 0; i < data.length; i++) {
        var item = data[i];
        var status = {'id': item.id, 'name': item['attributes'].name};
        results.push(status);
      }
      deferred.resolve(results);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.createStatus = function (status) {
    var deferred = $q.defer();
    $http({
      method: 'POST',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl,
      data: {
        'data': {
          'type': 'shipping-statuses',
          'attributes': {
            'name': status.name
          }
        }
      }
    }).success(function (response) {
      var data = response['data'].data;
      var result = {
        'id': data.id,
        'name': data['attributes'].name
      };
      deferred.resolve(result);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.updateStatus = function (id, attributes) {
    var deferred = $q.defer();
    $http({
      method: 'PATCH',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + id,
      data: {
        'data': {
          'type': 'shipping-statuses',
          'id': id,
          'attributes': attributes
        }
      }
    }).success(function (response) {
      deferred.resolve(response);
    }).error(function (err) {
      deferred.reject(err);
    });
    return deferred.promise;
  };

  this.deleteStatus = function (id) {
    var deferred = $q.defer();
    $http({
      method: 'DELETE',
      headers: {'Authorization': authorizationHeader},
      url: baseUrl + '/' + id
    }).success(function (data) {
      deferred.resolve(data)
    }).error(function (err) {
      deferred.reject(err)
    });
    return deferred.promise;
  }
});

var loadScopeDependencies = function (scope) {

  var formatMoney = function (number, currency) {
    return (number + "").replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") + " " + currency;
  };

  scope.utils = {
    formatMoney: function (number) {
      if (number == null) return "";
      return formatMoney(number, 'Ä‘');
    },
    momentFromNow: function (dtStr) {
      return moment(dtStr).fromNow();
    },
    simpleDateFormat: function (dtStr) {
      if (dtStr == null || dtStr == '') return '';
      return moment(dtStr).format('dddd, DD/MM/YYYY');
    },
    verifyDate: function (dtStr) {
      var patt = /^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/;
      return patt.test(dtStr);
    }
  };

  scope.inputOptions = {
    numeral: {
      numeral: true
    },
    phone: {
      phone: true,
      phoneRegionCode: 'VN'
    },
    date: {
      date: true,
      datePattern: ['d', 'm', 'Y']
    }
  };

};
